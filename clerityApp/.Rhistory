plot(ds$Store.Postcode,ds$Retail.Price, main="Side by Side Box Plot",ylab="Price", xlab="Retail Stores", col=rainbow(20))
#recall I named my dataset ds when I imported it from the csv above
summary(ds$Retail.Price)
#because this question is vague I just output measures of central tendancy that we use for creating an overall boxplot
boxplot(ds$Retail.Price, main="Price Box Plot", ylab="Price", col=rainbow(1))
#I'm going to "Make sure that the date column is recognized as such." by setting column two to be of type Date
column2=as.Date(ds[,1],"%d/%m/%Y")
#then we create a dataframe with just our new column 2 and the retail prices
ahh=data.frame(column2, ds$Retail.Price)
plot(ahh, 'l')
#for this visualization I decide to repeat the side by side boxplot as I think it best visualizes the differences present.
boxplot(ds$Retail.Price~ds$Store.Postcode,data=ds,
main="Price consistency per stores",
xlab = "Retail Stores",
ylab="Price",
border="black",las=2,
cex.axis=0.55
)
library(ggplot2)
qplot(ds$Configuration,ds$Retail.Price)
qplot(ds$Configuration,ds$Retail.Price, geom=c("point", "smooth"))
highsales=aggregate(cbind(Freq)~Store.Postcode,data=ds,FUN=sum)
View(ds)
View(ds)
sum(ds)
count(ds)
#ds$Store.Postcode
count(ds)
#ds$Store.Postcode
library(plyr)
count(ds)
#ds$Store.Postcode
library(plyr)
count(ds)
library("dplyr")
data %>% group_by(ds$Store.Postcode) %>% summarize(count=n())
#ds$Store.Postcode
library(plyr)
count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
aggregate(data.frame(count = v), list(value = v), length)
#ds$Store.Postcode
library(plyr)
count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
aggregate(data.frame(count = ds), list(value = ds), length)
#ds$Store.Postcode
library(plyr)
count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
aggregate(data.frame(count = ds), length)
#ds$Store.Postcode
library(plyr)
count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
aggregate(data.frame(count = ds), length, FUN=sum())
#ds$Store.Postcode
library(plyr)
count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
aggregate(data.frame(count = ds), length, FUN=sum(ds$Store.Postcode))
dfds<-as.data.frame(ds)
View(dfds)
#ds$Store.Postcode
#library(plyr)
#count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
#aggregate(data.frame(count = ds), length, #FUN=sum(ds$Store.Postcode))
dfds<-as.data.frame(ds)
aggregate(data.frame(count = x),       # Apply aggregate function
list(value = x),
length)
#ds$Store.Postcode
#library(plyr)
#count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
#aggregate(data.frame(count = ds), length, #FUN=sum(ds$Store.Postcode))
dfds<-as.data.frame(ds)
aggregate(data.frame(count = dfds),       # Apply aggregate function
list(value = dfds),
length)
#ds$Store.Postcode
#library(plyr)
#count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
#aggregate(data.frame(count = ds), length, #FUN=sum(ds$Store.Postcode))
dfds<-as.data.frame(ds)
aggregate(data.frame(count = ds),       # Apply aggregate function
list(value = ds),
length)
#ds$Store.Postcode
#library(plyr)
#count(ds)
#library("dplyr")
#data %>% group_by(ds$Store.Postcode) %>% #summarize(count=n())
#aggregate(data.frame(count = ds), length, #FUN=sum(ds$Store.Postcode))
dfds<-as.data.frame(ds)
aggregate(data.frame(count = ds$Store.Postcode),       # Apply aggregate function
list(value = ds$Store.Postcode),
length)
dfds<-as.data.frame(ds)
aggregate(data.frame(count = ds$Customer.Postcode),       # Apply aggregate function
list(value = ds$Customer.Postcode),
length)
dfds<-as.data.frame(ds)
plot(aggregate(data.frame(count = ds$Customer.Postcode),       # Apply aggregate function
list(value = ds$Customer.Postcode),
length))
dfds<-as.data.frame(ds)
plot(aggregate(data.frame(count = ds$Customer.Postcode),       # Apply aggregate function
list(value = ds$Customer.Postcode),
length))
plot(aggregate(data.frame(count = ds$Store.Postcode),       # Apply aggregate function
list(value = ds$Store.Postcode),
length))
View(dp)
View(ds)
plot(1,2)
election=read.csv("c:/Users/Caroline/Documents/R/Copy of federalelections2016(1).csv")
election=read.csv("c:/Users/Caroline/Documents/R/federalelections2016.csv")
dataset.statepop=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
view(dataset.statepop)
dataset.statepop=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.statepop)
statepop=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(statepop)
statepop=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(statepop)
statepop= dataset.statepop(order(estimatedbase,1))
View(dataset1.statepop)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset1.df= dataset.df(order(-estimatedbase), na.rm=TRUE)
dataset.df <- na.omit()
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df(order(-estimatedbase), na.rm=TRUE)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df(order(-estimatedbase), na.rm=TRUE)
View(dataset1.df)
dataset1.df= dataset.df[order(-estimatedbase),])
dataset1.df= dataset.df[order(-estimatedbase),]
dataset1.df= dataset.df[order(-estimated.base),]
dataset1.df= dataset.df[order(-EstimatedBase),]
dataset1.df= dataset.df[order(-$EstimatedBase),]
dataset1.df= dataset.df[order(-ddf$EstimatedBase),]
dataset1.df= dataset.df[order(-df$EstimatedBase),]
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
dataset1.df=dataset.df - dataset.df(state="Puerto Rico")
dataset1.df
dataset1.df= dataset.df[order(-EstimatedBase),]
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
dataset1.df= dataset.df[order(-dataset1.df$EstimatedBase),]
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df=dataset.df - dataset.df(state="Puerto Rico")
dataset1.df= dataset.df[order(-dataset1.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df=dataset.df - dataset.df(state="Puerto Rico")
dataset1.df= dataset.df[order(-dataset1.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset1.df$EstimatedBase),]
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df)
barplot(dataset1.df$estimatedbase, names.arg=dataset1.df$area)
barplot(dataset1.df$EstimatedBase, names.arg=dataset1.df$area)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
order(dataset1.df$Population)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
order(dataset1.df$pop2016)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
order(dataset1.df$pop2016, 1)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase), 1]
View(dataset1.df)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
order(dataset1.df$pop2016)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
library(tidyverse)
library(ggplot2)
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statevote.csv")
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.af=read.csv("c:/Users/Caroline/Documents/R/statevote.csv")
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df$EstimatedBase, names.arg=dataset1.df$area)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
library(tidyverse)
library(ggplot2)
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.af=read.csv("c:/Users/Caroline/Documents/R/statevote.csv")
view(dataset.af)
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.af=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
View(dataset.af)
View(dataset.af)
View(dataset.df)
View(dataset.af)
View(dataset.af)
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.2=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
#What was the winning or losing margins (in terms of votes) in decreIasing order?
dataset.2=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
View(dataset.2)
View(dataset.2)
View(marginwinTrump)
marginwinTrump=dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1-dataset.2$POPULAR.VOTE.2
library(tidyverse)
library(ggplot2)
#What was the winning or losing margins (in terms of votes) in decreasing order?
dataset.2=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
View(dataset.2)
marginwinTrump=dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1-dataset.2$POPULAR.VOTE.2
View(marginwinTrump)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df$EstimatedBase, names.arg=dataset1.df$area)
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
marginwinTrump=dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1-dataset.2$POPULAR.VOTE.2
#What was the winning or losing margins (in terms of votes) in decreasing order?
dataset.2=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
View(dataset.2)
marginwinTrump=dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1-dataset.2$POPULAR.VOTE.2
View(marginwinTrump)
plot(marginwinTrump)
plot(marginwinTrump, dataset.2$STATE)
plot(marginwinTrump)
dataset.2.new= [order(-marginwinTrump),]
dataset.22= [order(-marginwinTrump),]
dataset.new= [order(-marginwinTrump),]
dataset.new= order(-marginwinTrump),
dataset.new= order(-marginwinTrump)
plot(dataset.new)
barplot(dataset1.df$EstimatedBase/1000000, names.arg=dataset1.df$area, xlab="State", ylab="Population in Millions")
ggplot2(dataset.new)
plot(dataset.new)
View(dataset1.df)
View(dataset.2)
View(dataset.df)
View(dataset1.df)
View(dataset.2)
marginwinTrump=(dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1)/dataset.2$POPULAR.VOTE.3
View(marginwinTrump)
data.frame(marginwinTrump, dataset.2$STATE)
View(dataset.df)
plot(dataset.new)
ggplot(data=dataset.new)
plot(dataset.new)
barplot(dataset.new)
dataset.new= order(-trash$marginwinTrump)
dataset.new= order[(-trash$marginwinTrump),]
View(trash)
trash<-data.frame(marginwinTrump, dataset.2$STATE)
View(trash)
dataset.new<-trash[order(-trash$marginwinTrump),]
barplot(dataset.new)
barplot(dataset.new$marginwinTrump, dataset.new$dataset.2.STATE)
barplot(dataset.new$marginwinTrump, dataset.new$dataset.2.STATE)
barplot(dataset.new$marginwinTrump, dataset.new$STATE)
barplot(dataset.new)
barplot(dataset.new$marginwinTrump, names.arg=datset.new$STATE)
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE)
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df$EstimatedBase/1000000, names.arg=dataset1.df$area, xlab="State", ylab="Population in Millions")
#What is the estimated population of each state (presented in decreasing size)?
#theanser is displayed
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE, xlab="State", ylab="Margin that trump won")
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE, xlab="State", ylab="Margin Trump Won")
barplot(dataset1.df$EstimatedBase/1000000, names.arg=dataset1.df$area, xlab="State", ylab="Population in Millions")
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df$EstimatedBase/1000000, names.arg=dataset1.df$area, xlab="State", ylab="Population in Millions", main="Estimated Pop by State (DESC)")
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
View(dataset.2)
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE, xlab="State", ylab="Margin Trump Won", main="Margin that Trump won by")
abs(marginwinTrump)
min(abs(marginwinTrump))
dataset.df=read.csv("c:/Users/Caroline/Documents/R/statepop.csv")
View(dataset.df)
dataset.df <- na.omit(dataset.df)
dataset1.df= dataset.df[order(-dataset.df$EstimatedBase),]
View(dataset1.df)
barplot(dataset1.df$EstimatedBase/1000000, names.arg=dataset1.df$area, xlab="State", ylab="Population in Millions", main="Estimated Pop by State (DESC)")
#order(dataset1.df$pop2016)
#create new ordered factor datacamp example for more fun
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE, xlab="State", ylab="Margin Trump Won", main="Margin that Trump won by")
library(tidyverse)
library(ggplot2)
#What was the winning or losing margins (in terms of votes) in decreasing order?
dataset.2=read.csv("c:/Users/Caroline/Documents/R/table2.csv")
View(dataset.2)
marginwinTrump=(dataset.2$POPULAR.VOTE-dataset.2$POPULAR.VOTE.1)/dataset.2$POPULAR.VOTE.3
trash<-data.frame(marginwinTrump, dataset.2$STATE)
View(trash)
dataset.new<-trash[order(-trash$marginwinTrump),]
barplot(dataset.new$marginwinTrump, names.arg=dataset.new$STATE, xlab="State", ylab="Margin Trump Won", main="Margin that Trump Won by State")
View(dataset.2)
View(pot)
View(pot2)
df <- na.omit(read.csv('testdata.csv'))
head(df)
tail(df)
summary(df)
df$year <- (substring(df$c_violation_date,first=1, last=4))
df$month <- (substring(df$c_violation_date,first=6, last=7))
df$day <-(substring(df$c_violation_date,first=9, last=10))
df$date <- paste(df$day, df$month,df$year, sep="")
df$date2 <- as.Date(df$date, "%d%m%Y")
df$year <- as.numeric(substring(df$c_violation_date,first=1, last=4))
df$month <- as.numeric(substring(df$c_violation_date,first=6, last=7))
df$day <-as.numeric(substring(df$c_violation_date,first=9, last=10))
write.csv(df, file="cleanedData.csv")
year <- c(2009:2014)
months <-c(1:12)
days <- c(1:31)
library(lubridate)
library(dplyr)
pot2 <-read.csv("C:/Users/Caroline/Documents/GitHub/Milwaukee-Crime-Forecaster/cleanedData.csv")
date=as.Date(pot2$date2)
pot2 %>% group_by(date) %>% summarise(frequency = n())
install.packages("forcast")
install.packages("forecast")
totalsa.df <- read.csv("TOTALSA.csv", header = T)
totalnsa.df <- read.csv("TOTALNSA.csv", header = T)
View(totalsa.df)
library(forecast)
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
nsa.ts <- ts(totalnsa.df$TOTALNSA, start=c(1976,1), end =c(2020,3), frequency = 12)
par(mfrow=c(1,1))
plot(sa.ts, xlab="Time", ylab = "seas. adj. sales (in millions)")
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
plot(tsSmooth(sa.ts), main = "")
View(totalsa.df)
library(forecast)
install.packages("forecast")
library(forecast)
```{r}
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
plot(tsSmooth(sa.ts), main = "")
library(forecast)
---
title: "BI In-Class Assignment 414"
output: html_notebook
---
```{r}
totalsa.df <- read.csv("TOTALSA.csv", header = T)
totalnsa.df <- read.csv("TOTALNSA.csv", header = T)
View(totalsa.df)
library(forecast)
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
nsa.ts <- ts(totalnsa.df$TOTALNSA, start=c(1976,1), end =c(2020,3), frequency = 12)
```
```{r}
par(mfrow=c(1,1))
plot(sa.ts, xlab="Time", ylab = "seas. adj. sales (in millions)")
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
```
```{r}
plot(tsSmooth(sa.ts), main = "")
```
^rip don't know what I'm doing wrong there
View(sa.ts)
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
nsa.ts <- ts(totalnsa.df$TOTALNSA, start=c(1976,1), end =c(2020,3), frequency = 12)
```{r}
library(forecast)
---
title: "BI In-Class Assignment 414"
output: html_notebook
---
```{r}
totalsa.df <- read.csv("TOTALSA.csv", header = T)
totalnsa.df <- read.csv("TOTALNSA.csv", header = T)
View(totalsa.df)
library(forecast)
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
nsa.ts <- ts(totalnsa.df$TOTALNSA, start=c(1976,1), end =c(2020,3), frequency = 12)
```
```{r}
par(mfrow=c(1,1))
plot(sa.ts, xlab="Time", ylab = "seas. adj. sales (in millions)")
```
```{r}
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
#plot(tsSmooth(sa.ts), main = "")
```
totalsa.df <- read.csv("TOTALSA.csv", header = T)
totalnsa.df <- read.csv("TOTALNSA.csv", header = T)
View(totalsa.df)
library(forecast)
sa.ts <- ts(totalsa.df$TOTALSA, start=c(1976,1), end =c(2020,3), frequency = 12)
nsa.ts <- ts(totalnsa.df$TOTALNSA, start=c(1976,1), end =c(2020,3), frequency = 12)
par(mfrow=c(1,1))
plot(sa.ts, xlab="Time", ylab = "seas. adj. sales (in millions)")
plot(nsa.ts, xlab="Time", ylab= "sales (in 000s)")
#plot(tsSmooth(sa.ts), main = "")
plot(tsSmooth(sa.ts), main = "")
plot(a)
a<- tsSmooth(sa.ts)
a= tsSmooth(sa.ts)
plot(a)
a= tsSmooth(sa.ts)
a= tsSmooth(StructTS(sa.ts))
plot(a)
View(totalsa.df)
View(totalnsa.df)
a= tsSmooth(StructTS(nsa.ts))
plot(a)
b= tsSmooth(StructTS(nsa.ts))
plot(b)
install.packages("shiny")
R -e "shiny::runApp('~/app.R')"
R -e "shiny::runApp('~/app')"
shiny::runApp('001-hello')
shiny::runApp('GitHub/Cler-it-y/clerityApp')
runApp('GitHub/Cler-it-y/clerityApp')
runApp('GitHub/Cler-it-y/clerityApp')
runApp('GitHub/Cler-it-y/clerityApp')
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shinythemes")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
install.packages("shinythemes")
library(shinythemes)
# Define UI for application that draws a histogram
ui <- fluidPage(
shinythemes::themeSelector(),
# Application title
titlePanel("Clerity: College Crime Rates in Milwaukee"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel("Select School",
selectInput("school", "Campus:", c("Alverno College"=1,"Cardinal Stritch University"=2,"Marquette University"=3,"Milwaukee Area Technical College"=4,"Milwaukee Institute of Art & Design"=5,"Milwaukee School of Engineering"=6,"Mount Mary College"=7,"Bryant and Stratton College"=8,"Wisconsin Lutheran College"=9,"University of Wisconsin-Milwaukee"=10)),
selectInput("weight", "Number of Crimes", c("Total" = 0, "Per Student" = 1, "Per 1000 Students"=2)),
selectInput("line","Baseline for Comparison", c("Overall Trend Line"=0,"Smoothed Trend Line"=1))
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("linePlot"),
)
)
)
runApp('GitHub/Cler-it-y/clerityApp')
install.packages("shinythemes")
shiny::runApp()
runApp()
install.packages("shinythemes")
